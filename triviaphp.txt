<?php
// Run this file using screen to start bote, be sure that PHP can write in directory, where this file is located. Also you need to create directory "logs".
define('debug',0); // Debug mode, debug info posted to console
define('administrator_id',376356504); // Change administrator_id to your Telegram ID
define('bote_id','5500911704'); // Change this to your bot ID, get bot ID from BotFather (https://core.telegram.org/bots)
global  $ bot ;
global $players;
global  $ allplayers ;
global $top;
global $game;
global $banlist;
global  $ sendall ;
$sendall='';
$players=array();
$allplayers=array();
$top=array();
if (file_exists('top')){
	$top=unserialize(file_get_contents('top'));
}
if (file_exists('players')){
	$players=unserialize(file_get_contents('players'));
}
if (file_exists('allplayers')){
	$ allplayers = unserialize(file_get_contents( 'allplayers' ));
}
if (file_exists('banlist')){
	$banlist=unserialize(file_get_contents('banlist'));
}

global $questionlist;
$questions=file_get_contents('quiz');
$questions.="\n".file_get_contents('quiz2');
$questionlist=explode("\n",trim($questions));

$game=array(
	'state' => 0 , // 0 - pause between questions, 1 - question asked
	'timer' => 0 , // timer
	'last' =>time(), // last action (second count)
	'question'=>'',
	'answer'=>'',
	'pod'=>0,
);

require('telegrambot.class.php');
$ bot = new telegrambot(bot_id);
while(1){
	$messages=$bot->getUpdates();
	if ($messages!=false){
		foreach($messages as $msg){
			if ($msg['message']['text'] && $msg['message']['from']['id']==$msg['message']['chat']['id']){
				if (debug==1) echo 'Got text: '.$msg['message']['text']."\n";
				$from=$msg['message']['from'];
				$text=$msg['message']['text'];
				switch ($text){
					case '/start':
					case  '/start' :
					case  '/Start' :
					case '/Start':
						start($from['id'],$from['first_name'],$from['last_name']);
					break;
					case '/stop':
					case '/end':
					case  '/stop' :
					case  '/Stop' :
					case '/Stop':
					case '/quit':
					case '/exit':
						stop($from['id']);
					break;
					case '/help':
						help($from['id']);
					break;
					case '/top':
						top($from['id']);
					break;
					case '/mytop':
						mytop($from['id']);
					break;
					case '/reloadquiz':
						if ($from['id']==administrator_id){
							global $questionlist;
							$questions=file_get_contents('quiz');
							$questions.="\n".file_get_contents('quiz2');
							$questionlist=explode("\n",trim($questions));
						}
					break;
					default:
						if (mb_stripos( $ text , '/ban' , 0 , 'UTF-8' )!== FALSE && $ from [ 'id' ]==administrator_id){
							ban(mb_substr($text,5,mb_strlen($text,'UTF-8'),'UTF-8'));
						}else
						if (mb_stripos( $ text , '/unban' , 0 , 'UTF-8' )!== FALSE && $ from [ 'id' ]==administrator_id){
							unban(mb_substr($text,7,mb_strlen($text,'UTF-8'),'UTF-8'));
						}else
						if (mb_stripos($text,'/feedback',0,'UTF-8')!==FALSE){
							feedback($from['id'],mb_substr($text,10,mb_strlen($text,'UTF-8'),'UTF-8'));
						}else
						message($from['id'],$text);
					break;
				}
			}
		}
	}
	process();
	flushlog();
	usleep(500000);
}

function feedback($userid,$text){
	global  $ bot ;
	$text=iconv('utf-8','windows-1251',$text);
	if (strlen($text)>3){
		file_put_contents('feedback',"\n".date('d.m.Y H:i:s '.$userid.': '.$text),FILE_APPEND);
		$ bot -> send ( $ userid , 'Your message has been recorded. Thank you!' ); // "Your message wrote. Thanks!"
	}else{
		$ bot -> send ( $ userid , 'No feedback text, use command properly - "/feedback text" (without quotes).' ); // "No feedback text, use command right - /feedback text"
	}
}

function ban($userid){
	global  $ allplayers , $ bot ;
	if (isset($allplayers[$userid])){
		global $banlist;
		$banlist[$userid]=1;
		stop($userid);
		file_put_contents('banlist',serialize($banlist));
		$ bot -> send ( 30406413 , 'Player ' . $ userid . ' blocked, account cancelled.' ); // "Player ... banned, score nulled."
		$top[$userid]=0;
		$ bot -> send ( $ userid , 'You have been banned by the administrator, your points have been collected.' ); // "You were blocked by administrator, your score is nulled."
	}else{
		$ bot -> send ( 30406413 , 'Player ' . $ userid . ' not found in player list.' ); // "Player ... was not found in players list."
	}
}

function unban($userid){
	global  $ allplayers , $ bot , $ banlist ;
	if (isset($allplayers[$userid]) && isset($banlist[$userid])){
		unset($banlist[$userid]);
		file_put_contents('banlist',serialize($banlist));
		$ bot -> send ( 30406413 , 'Player ' . $ userid . ' unlocked.' ); // "Player ... unbanned."
		$ bot -> send ( $ userid , 'You have been unblocked by an admin.' ); // "You were unbanned by administrator"
	}else{
		$ bot -> send ( 30406413 , 'Player ' . $ userid . ' not found in player/ban list.' ); // "Player ... was not found in ban list."
	}
}

function process(){
	global $game,$players;
	if (count($players)==0) return;
	if ($game['state']==0){
		// pause between questions
		if (time()>$game['last']+$game['timer']){
			// status switch - ask a question
			$game['state']=1;
			$game['timer']=60;
			$game['last']=time();
			$q=getquestion();
			$game['question']=$q[0];
			$game['answer']=$q[1];
			$game['pod']=0;
			flushlog();
			$text=$game['question'];
			if (mb_strpos($text,'###')){
				$text=explode('###',$text);
				sendallimg( 'images/' . $ text [ 1 ], '⁉️ Question: ' . $ text [ 0 ]); // "Question: .."
			}else{
				sendall( '⁉️ Question: ' . $ text );
			}
			flushlog();
			file_put_contents('logs/'.date('d.m.y'),date('H:i:s').' Вопрос! '.$game['question']."\n",FILE_APPEND);
		}
	}else{
		if (time()>$game['last']+$game['timer']){
			// time expired, no one answered
			$game['state']=0;
			$game['timer']=10;
			$game['last']=time();
			flushlog();
			sendall( 'No one answered the question. Next question in 10 seconds.' ); // "Nobody answers. Next question in 10 seconds"
			// you can add this $game['answer'] to previous line to show right answer
			flushlog();
		}else if ((time()>$game['last']+15) && $game['pod']==0){
			$game['pod']=1;
			// give hint 1
			$pod='';
			$pod.=mb_substr($game['answer'],0,1,'UTF-8');
			for ($i=1;$i<mb_strlen($game['answer'],'UTF-8')-1;$i++){
				$pod.='*';
			}
			$pod.=mb_substr($game['answer'],mb_strlen($game['answer'],'UTF-8')-1,1,'UTF-8');
			sendall( '❕ Hint: ' . $ pod . '. Next hint is in 30 seconds.' ); // "Hint: ... Next hint in 30 seconds"
			flushlog();
		}else if ((time()>$game['last']+45) && $game['pod']==1){
			$game['pod']=2;
			// give hint 2
			$pod='';
			$pod.=mb_substr($game['answer'],0,2,'UTF-8');
			for ($i=2;$i<mb_strlen($game['answer'],'UTF-8')-1;$i++){
				if ($i==4) $pod.=mb_substr($game['answer'],4,1,'UTF-8');
				else if ($i==7) $pod.=mb_substr($game['answer'],7,1,'UTF-8');
				else if ($i==9) $pod.=mb_substr($game['answer'],9,1,'UTF-8');
				else if ($i==12) $pod.=mb_substr($game['answer'],12,1,'UTF-8');
				else  $ pod .= '*' ;
			}
			$pod.=mb_substr($game['answer'],mb_strlen($game['answer'],'UTF-8')-1,1,'UTF-8');
			sendall( '❕ Hint: ' . $ pod . '.' ); // "Hint: ..."
			flushlog();
		}
	}
}

function sendallimg($img,$caption){
	global $players,$bot;
	foreach ($players as $id=>$misc){
		$bot->sendimg($id,$img,$caption);
	}
	if (debug==1) echo 'Send all img: '.$img.' '.$caption."\n";
}

function sendall($text,$except=0){
	global  $ sendall ;
	$sendall.=$text."\n";
}

function flushlog(){
	global  $ sendall ;
	if ($sendall!=''){
		global $players,$bot;
		foreach ($players as $id=>$misc){
			$bot->send($id,$sendall);
		}
		$sendall='';
		if (debug==1) echo 'Send all: '.$sendall."\n";
	}
}

function message($userid,$text){
	global $game;
	global $players;
	global $top;
	global  $ bot ;
	if (isset($players[$userid])){
		file_put_contents('logs/'.date('d.m.y'),date('H:i:s').' '.$userid.' '.$players[$userid][0].' '.$players[$userid][1].': '.$text."\n",FILE_APPEND);
		sendall($players[$userid][0].' '.$players[$userid][1].': '.$text,$userid);
		if ($game['state']==1){
			// question asked - compare answer
			if (mb_stripos(mb_strtolower( $ text , 'UTF-8' ), $ game [ 'answer' ], 0 , 'UTF-8' )!== FALSE ){
				$game['state']=0;
				$game['timer']=5;
				$game['last']=time();	
				if ($game['pod']==0){
					$prize=3;
				}else{
					$prize=1;
				}
				$top[$userid]+=$prize;
				sendall( '‼️ The correct answer is "' . $ game [ 'answer' ]. '". ' . $ players [ $ userid ][ 0 ]. ' ' . $ players [ $ userid ][ 1 ]. ' receives ' . $ prize .'point' . ( $ prize > 1 ? 'a' : '' ). ', player's total score is ' .$top[$userid]); // "Right answer - ..., gets ... score, total player scores - ..."
				flushlog();
				file_put_contents('top',serialize($top));
			}
		}
	}else{
		$ bot -> send ( $ userid , 'Type /start to enter the game.' ); // "Send /start command to enter the game."
	}
}

function start($userid,$first_name,$last_name){
	global $banlist,$bot,$players;
	global $allplayers,$game,$top;
	if (!isset($players[$userid])){
		if (!isset($banlist[$userid])){
			$players[$userid]=array($first_name,$last_name);
			$allplayers[$userid]=array($first_name,$last_name);
			file_put_contents('allplayers',serialize($allplayers));
			file_put_contents('players',serialize($players));
			//sendall('Receives '.$allplayers[$userid][0].' '.$allplayers[$userid][1].' ('.(int)$top[$userid].' points).' );
			$ bot -> send ( $ userid , 'You are in the game. Read the questions and write the answers! To exit the game, type /stop' ); // "You've entered game. Read questions and write answers. To leave game send /stop"
			$ bot -> send ( $ userid , 'Now in game ' .count( $ players ). ' players.' );
			if ($game['state']==1){
				$ bot -> send ( $ userid , 'Current question: ' . $ game [ 'question' ]);
			}
		}else{
			$ bot -> send ( $ userid , 'You are banned from the game, you can leave a message to the administrator with the command "/feedback text" (without quotes).' ); // "You were blocked"
		}
	}
}

function stop($userid){
	global $players,$allplayers,$bot,$top;
	if (isset($players[$userid])){
		$ bot -> send ( $ userid ," You are out of the game. To return to the game, type /start \n If you like BukToPuHa - rate the bot in the overall rating - https://telegram.me/storebot?start=BukToPuHabot ") ; // "You've left game. To enter again write /start "
		unset($players[$userid]);
		//sendall($allplayers[$userid][0].' '.$allplayers[$userid][1].' ('.(int)$top[$userid].' points) leaves the game.') ;
		file_put_contents('players',serialize($players));
	}
}


function help($userid){
	global $bot,$players,$questionlist;
	$ bot -> send ( $ userid ," BukToPuHa v.0.1 \n The bot asks questions that the players answer. Players see each other's answers. The first one to answer before the hint gets 3 points, after the hint - 1 point. \n Now in the game : ".count( $ players )." players. \n Questions in the database: ".count( $ questionlist )." . \n Bot commands: \n /start - enter the game \n /stop - exit the game \ n /top - top players \n /mytop - your points \nSend a message to the developer - /feedback text \n\n The game does not welcome swearing and inappropriate behavior, malicious violators will be blocked. \n\n Developer - @ivanboytsov "); // This is help-message, use README.md or your own text here.
}

function mytop($userid){
	global  $ bot ;
	global $top;
	arsort($top);
	$xtop=array_keys($top);
	$place=array_search($userid,$xtop);
	$ bot -> send ( $ userid , 'You have ' .( int ) $ top [ $ userid ]. ' points, ranking - ' .( $ place + 1 )); // "You've got ... scores, place in top - ..."
}

function top($userid){
	global  $ bot ;
	global  $ top , $ allplayers ;
	arsort($top);
	$out='';
	$i=0;
	foreach ($top as $k=>$p){
		$out.=($i+1).'. '.$allplayers[$k][0].' '.$allplayers[$k][1].' - '.$p."\n";
		$i++;
		if ($i==20) break;
	}
	$bot->send($userid,$out);
}

function getquestion(){
	global $questionlist;
	$one=explode('*',$questionlist[array_rand($questionlist)]);
	$one[0]=mb_ucfirst($one[0]);
	$one[1]=trim($one[1]);
	return $one;
}

function mb_ucfirst($str) { 
    return mb_substr(mb_strtoupper($str,'utf-8'),0,1,'utf-8').mb_strtolower(mb_substr($str,1,mb_strlen($str,'utf-8'),'utf-8'),'utf-8');
} 

?>